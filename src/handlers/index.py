from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from handlers import balance
from handlers import calculator
from handlers.admin import index as admin
from handlers.operator import index as operator
from utils.send_info import send_info
from utils.send_help import send_help
from middleware.is_chat_on import isChatOnMiddleware
from database.db import (
    get_chat,
    add_chat,
    update_chat,
    set_balance,
    update_balance,
    set_payment,
    update_payment,
    set_rate,
    update_rate,
    set_course,
    update_course,
    set_deposit,
    update_deposit,
    clear_history,
)

router = Router()
router.include_router(admin.router)
router.include_router(operator.router)
router.include_router(balance.router)
router.include_router(calculator.router)

router.message.middleware(isChatOnMiddleware())

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–±–∞—Ä–∞
def create_reply_minibar():
    return ReplyKeyboardMarkup(
        keyboard=[
            # [KeyboardButton(text="üü¢ Start")],
            [KeyboardButton(text="‚ÑπÔ∏è Info"), KeyboardButton(text="‚ùì Help")],
            [KeyboardButton(text="üîÑ Restart"), KeyboardButton(text="‚õî Stop")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–∏–Ω–∏–±–∞—Ä–∞",
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–∏–Ω–∏–±–∞—Ä–∞
@router.message(Command(commands="minibar"))
async def cmd_minibar(message: types.Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–∏–Ω–∏–±–∞—Ä –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞.
    """
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=create_reply_minibar(),
    )

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞
async def initialize_chat(chat_id: int):
    await add_chat(chat_id)
    await set_balance(chat_id)
    await set_payment(chat_id)
    await set_rate(chat_id)
    await set_course(chat_id)
    await set_deposit(chat_id)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(Command(commands="start"))
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    chat = await get_chat(chat_id)

    if not chat:
        await initialize_chat(chat_id)
        await message.answer(
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup=create_reply_minibar(),
        )
        await send_help(message)
        return

    await update_chat(chat_id, True)
    await message.answer(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å <b>–¥–µ–ø–æ–∑–∏—Ç, –∫—É—Ä—Å –∏ —Å—Ç–∞–≤–∫—É</b>.",
        parse_mode="HTML",
        reply_markup=create_reply_minibar(),
    )

@router.message(Command(commands="info"))
async def cmd_info(message: types.Message):
    await send_info(message)

@router.message(Command(commands="help"))
async def cmd_help(message: types.Message):
    await send_help(message)

@router.message(Command(commands="restart"))
async def cmd_restart(message: types.Message):
    chat_id = message.chat.id
    chat = await get_chat(chat_id)

    if not chat:
        await initialize_chat(chat_id)
        await message.answer(
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup=create_reply_minibar(),
        )
    else:
        await clear_history(chat_id)
        await update_balance(chat_id, 0, 0)
        await update_payment(chat_id, 0, 0)
        await update_rate(chat_id, 0)
        await update_course(chat_id, 90)
        await update_deposit(chat_id, 0)
        await update_chat(chat_id, True)
        await message.answer(
            "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.",
            reply_markup=create_reply_minibar(),
        )
    await send_help(message)

@router.message(Command(commands="stop"))
async def cmd_stop(message: types.Message):
    chat_id = message.chat.id
    chat = await get_chat(chat_id)

    if chat:
        await clear_history(chat_id)
        await update_balance(chat_id, 0, 0)
        await update_payment(chat_id, 0, 0)
        await update_rate(chat_id, 0)
        await update_course(chat_id, 90)
        await update_deposit(chat_id, 0)
        await update_chat(chat_id, False)
        await message.answer(
            "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            reply_markup=create_reply_minibar(),
        )
#
# @router.message(F.text == "üü¢ Start")
# async def handle_start_button(message: types.Message):
#     await cmd_start(message)

@router.message(F.text == "‚ÑπÔ∏è Info")
async def handle_info_button(message: types.Message):
    await cmd_info(message)

@router.message(F.text == "‚ùì Help")
async def handle_help_button(message: types.Message):
    await cmd_help(message)

@router.message(F.text == "üîÑ Restart")
async def handle_restart_button(message: types.Message):
    await cmd_restart(message)

@router.message(F.text == "‚õî Stop")
async def handle_stop_button(message: types.Message):
    await cmd_stop(message)
